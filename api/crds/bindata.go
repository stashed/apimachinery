// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// stash.appscode.com_backupbatches.v1.yaml
// stash.appscode.com_backupbatches.yaml
// stash.appscode.com_backupblueprints.v1.yaml
// stash.appscode.com_backupblueprints.yaml
// stash.appscode.com_backupconfigurations.v1.yaml
// stash.appscode.com_backupconfigurations.yaml
// stash.appscode.com_backupsessions.v1.yaml
// stash.appscode.com_backupsessions.yaml
// stash.appscode.com_functions.v1.yaml
// stash.appscode.com_functions.yaml
// stash.appscode.com_recoveries.v1.yaml
// stash.appscode.com_recoveries.yaml
// stash.appscode.com_repositories.v1.yaml
// stash.appscode.com_repositories.yaml
// stash.appscode.com_restics.v1.yaml
// stash.appscode.com_restics.yaml
// stash.appscode.com_restoresessions.v1.yaml
// stash.appscode.com_restoresessions.yaml
// stash.appscode.com_tasks.v1.yaml
// stash.appscode.com_tasks.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stashAppscodeCom_backupbatchesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupbatchesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupbatchesV1Yaml,
		"stash.appscode.com_backupbatches.v1.yaml",
	)
}

func stashAppscodeCom_backupbatchesV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupbatchesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupbatches.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupbatchesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupbatchesYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupbatchesYaml,
		"stash.appscode.com_backupbatches.yaml",
	)
}

func stashAppscodeCom_backupbatchesYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupbatchesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupbatches.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupblueprintsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupblueprintsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupblueprintsV1Yaml,
		"stash.appscode.com_backupblueprints.v1.yaml",
	)
}

func stashAppscodeCom_backupblueprintsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupblueprintsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupblueprints.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupblueprintsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupblueprintsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupblueprintsYaml,
		"stash.appscode.com_backupblueprints.yaml",
	)
}

func stashAppscodeCom_backupblueprintsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupblueprintsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupblueprints.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupconfigurationsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupconfigurationsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupconfigurationsV1Yaml,
		"stash.appscode.com_backupconfigurations.v1.yaml",
	)
}

func stashAppscodeCom_backupconfigurationsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupconfigurationsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupconfigurations.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupconfigurationsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupconfigurationsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupconfigurationsYaml,
		"stash.appscode.com_backupconfigurations.yaml",
	)
}

func stashAppscodeCom_backupconfigurationsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupconfigurationsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupconfigurations.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupsessionsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupsessionsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupsessionsV1Yaml,
		"stash.appscode.com_backupsessions.v1.yaml",
	)
}

func stashAppscodeCom_backupsessionsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupsessionsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupsessions.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_backupsessionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_backupsessionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_backupsessionsYaml,
		"stash.appscode.com_backupsessions.yaml",
	)
}

func stashAppscodeCom_backupsessionsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_backupsessionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_backupsessions.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_functionsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_functionsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_functionsV1Yaml,
		"stash.appscode.com_functions.v1.yaml",
	)
}

func stashAppscodeCom_functionsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_functionsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_functions.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_functionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_functionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_functionsYaml,
		"stash.appscode.com_functions.yaml",
	)
}

func stashAppscodeCom_functionsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_functionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_functions.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_recoveriesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_recoveriesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_recoveriesV1Yaml,
		"stash.appscode.com_recoveries.v1.yaml",
	)
}

func stashAppscodeCom_recoveriesV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_recoveriesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_recoveries.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_recoveriesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_recoveriesYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_recoveriesYaml,
		"stash.appscode.com_recoveries.yaml",
	)
}

func stashAppscodeCom_recoveriesYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_recoveriesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_recoveries.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_repositoriesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_repositoriesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_repositoriesV1Yaml,
		"stash.appscode.com_repositories.v1.yaml",
	)
}

func stashAppscodeCom_repositoriesV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_repositoriesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_repositories.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_repositoriesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_repositoriesYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_repositoriesYaml,
		"stash.appscode.com_repositories.yaml",
	)
}

func stashAppscodeCom_repositoriesYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_repositoriesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_repositories.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_resticsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_resticsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_resticsV1Yaml,
		"stash.appscode.com_restics.v1.yaml",
	)
}

func stashAppscodeCom_resticsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_resticsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_restics.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_resticsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_resticsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_resticsYaml,
		"stash.appscode.com_restics.yaml",
	)
}

func stashAppscodeCom_resticsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_resticsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_restics.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_restoresessionsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_restoresessionsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_restoresessionsV1Yaml,
		"stash.appscode.com_restoresessions.v1.yaml",
	)
}

func stashAppscodeCom_restoresessionsV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_restoresessionsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_restoresessions.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_restoresessionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_restoresessionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_restoresessionsYaml,
		"stash.appscode.com_restoresessions.yaml",
	)
}

func stashAppscodeCom_restoresessionsYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_restoresessionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_restoresessions.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_tasksV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_tasksV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_tasksV1Yaml,
		"stash.appscode.com_tasks.v1.yaml",
	)
}

func stashAppscodeCom_tasksV1Yaml() (*asset, error) {
	bytes, err := stashAppscodeCom_tasksV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_tasks.v1.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stashAppscodeCom_tasksYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func stashAppscodeCom_tasksYamlBytes() ([]byte, error) {
	return bindataRead(
		_stashAppscodeCom_tasksYaml,
		"stash.appscode.com_tasks.yaml",
	)
}

func stashAppscodeCom_tasksYaml() (*asset, error) {
	bytes, err := stashAppscodeCom_tasksYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stash.appscode.com_tasks.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stash.appscode.com_backupbatches.v1.yaml":        stashAppscodeCom_backupbatchesV1Yaml,
	"stash.appscode.com_backupbatches.yaml":           stashAppscodeCom_backupbatchesYaml,
	"stash.appscode.com_backupblueprints.v1.yaml":     stashAppscodeCom_backupblueprintsV1Yaml,
	"stash.appscode.com_backupblueprints.yaml":        stashAppscodeCom_backupblueprintsYaml,
	"stash.appscode.com_backupconfigurations.v1.yaml": stashAppscodeCom_backupconfigurationsV1Yaml,
	"stash.appscode.com_backupconfigurations.yaml":    stashAppscodeCom_backupconfigurationsYaml,
	"stash.appscode.com_backupsessions.v1.yaml":       stashAppscodeCom_backupsessionsV1Yaml,
	"stash.appscode.com_backupsessions.yaml":          stashAppscodeCom_backupsessionsYaml,
	"stash.appscode.com_functions.v1.yaml":            stashAppscodeCom_functionsV1Yaml,
	"stash.appscode.com_functions.yaml":               stashAppscodeCom_functionsYaml,
	"stash.appscode.com_recoveries.v1.yaml":           stashAppscodeCom_recoveriesV1Yaml,
	"stash.appscode.com_recoveries.yaml":              stashAppscodeCom_recoveriesYaml,
	"stash.appscode.com_repositories.v1.yaml":         stashAppscodeCom_repositoriesV1Yaml,
	"stash.appscode.com_repositories.yaml":            stashAppscodeCom_repositoriesYaml,
	"stash.appscode.com_restics.v1.yaml":              stashAppscodeCom_resticsV1Yaml,
	"stash.appscode.com_restics.yaml":                 stashAppscodeCom_resticsYaml,
	"stash.appscode.com_restoresessions.v1.yaml":      stashAppscodeCom_restoresessionsV1Yaml,
	"stash.appscode.com_restoresessions.yaml":         stashAppscodeCom_restoresessionsYaml,
	"stash.appscode.com_tasks.v1.yaml":                stashAppscodeCom_tasksV1Yaml,
	"stash.appscode.com_tasks.yaml":                   stashAppscodeCom_tasksYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stash.appscode.com_backupbatches.v1.yaml":        {stashAppscodeCom_backupbatchesV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_backupbatches.yaml":           {stashAppscodeCom_backupbatchesYaml, map[string]*bintree{}},
	"stash.appscode.com_backupblueprints.v1.yaml":     {stashAppscodeCom_backupblueprintsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_backupblueprints.yaml":        {stashAppscodeCom_backupblueprintsYaml, map[string]*bintree{}},
	"stash.appscode.com_backupconfigurations.v1.yaml": {stashAppscodeCom_backupconfigurationsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_backupconfigurations.yaml":    {stashAppscodeCom_backupconfigurationsYaml, map[string]*bintree{}},
	"stash.appscode.com_backupsessions.v1.yaml":       {stashAppscodeCom_backupsessionsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_backupsessions.yaml":          {stashAppscodeCom_backupsessionsYaml, map[string]*bintree{}},
	"stash.appscode.com_functions.v1.yaml":            {stashAppscodeCom_functionsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_functions.yaml":               {stashAppscodeCom_functionsYaml, map[string]*bintree{}},
	"stash.appscode.com_recoveries.v1.yaml":           {stashAppscodeCom_recoveriesV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_recoveries.yaml":              {stashAppscodeCom_recoveriesYaml, map[string]*bintree{}},
	"stash.appscode.com_repositories.v1.yaml":         {stashAppscodeCom_repositoriesV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_repositories.yaml":            {stashAppscodeCom_repositoriesYaml, map[string]*bintree{}},
	"stash.appscode.com_restics.v1.yaml":              {stashAppscodeCom_resticsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_restics.yaml":                 {stashAppscodeCom_resticsYaml, map[string]*bintree{}},
	"stash.appscode.com_restoresessions.v1.yaml":      {stashAppscodeCom_restoresessionsV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_restoresessions.yaml":         {stashAppscodeCom_restoresessionsYaml, map[string]*bintree{}},
	"stash.appscode.com_tasks.v1.yaml":                {stashAppscodeCom_tasksV1Yaml, map[string]*bintree{}},
	"stash.appscode.com_tasks.yaml":                   {stashAppscodeCom_tasksYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
